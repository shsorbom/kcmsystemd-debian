Description: additional changes
 Various cleanups and extra translations were added post-release
 .
 kde-config-systemd (1.2.1-1) unstable; urgency=medium
 .
   * New upstream release
   * update debian control file to innclude new KF5 dependencies
   * update debian copyright to comply with upstream license change, and add new contributer
   * Change links to refer to new ustream site
   * Update debian/rules to account for the change in qt5 plugin path
   * Change from experimental to unstable repository
Author: Shawn SÃ¶rbom <shawn@sorbom.com>

---


--- kde-config-systemd-1.2.1.orig/src/confdelegate.cpp
+++ kde-config-systemd-1.2.1/src/confdelegate.cpp
@@ -15,14 +15,14 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.              *
  *******************************************************************************/
 
+#include "confdelegate.h"
+
 #include <QDebug>
 #include <QSpinBox>
 #include <QComboBox>
 #include <QLineEdit>
 #include <QStandardItemModel>
 
-#include "confdelegate.h"
-
 ConfDelegate::ConfDelegate(QObject *parent, const QList<confOption> *confOptList)
     : QStyledItemDelegate(parent)
     , m_optList(confOptList)
--- kde-config-systemd-1.2.1.orig/src/confdelegate.h
+++ kde-config-systemd-1.2.1/src/confdelegate.h
@@ -27,7 +27,7 @@ class ConfDelegate : public QStyledItemD
   Q_OBJECT
   
 public:
-  ConfDelegate(QObject *parent = 0, const QList<confOption> *confOptList = 0);
+  explicit ConfDelegate(QObject *parent = 0, const QList<confOption> *confOptList = 0);
 
   QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &option,
                         const QModelIndex &index) const Q_DECL_OVERRIDE;
--- kde-config-systemd-1.2.1.orig/src/confmodel.cpp
+++ kde-config-systemd-1.2.1/src/confmodel.cpp
@@ -15,12 +15,12 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.              *
  *******************************************************************************/
 
+#include "confmodel.h"
+
 #include <QFont>
 
 #include <KLocalizedString>
 
-#include "confmodel.h"
-
 ConfModel::ConfModel(QObject *parent, QList<confOption> *confOptList)
  : QAbstractTableModel(parent)
  , m_optList(confOptList)
--- kde-config-systemd-1.2.1.orig/src/confmodel.h
+++ kde-config-systemd-1.2.1/src/confmodel.h
@@ -27,7 +27,7 @@ class ConfModel : public QAbstractTableM
   Q_OBJECT
   
 public:
-  ConfModel(QObject *parent = 0, QList<confOption> *confOptList = 0);
+  explicit ConfModel(QObject *parent = 0, QList<confOption> *confOptList = 0);
   int rowCount(const QModelIndex & parent = QModelIndex()) const;
   int columnCount(const QModelIndex & parent = QModelIndex()) const;
   QVariant headerData(int section, Qt::Orientation orientation, int role) const;
--- kde-config-systemd-1.2.1.orig/src/confoption.cpp
+++ kde-config-systemd-1.2.1/src/confoption.cpp
@@ -15,11 +15,11 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.              *
  *******************************************************************************/
 
-#include <QDebug>
-
 #include "confoption.h"
 #include "fsutil.h"
 
+#include <QDebug>
+
 // Initialize two static class members
 QStringList confOption::capabilities = QStringList() << "CAP_AUDIT_CONTROL" << "CAP_AUDIT_WRITE" << "CAP_BLOCK_SUSPEND" << "CAP_CHOWN"
                                            << "CAP_DAC_OVERRIDE" << "CAP_DAC_READ_SEARCH" << "CAP_FOWNER" << "CAP_FSETID" 
@@ -53,7 +53,7 @@ confOption::confOption(QVariantMap map)
 {
   file = static_cast<confFile>(map["file"].toInt());
   realName = map["name"].toString();
-  uniqueName = QString(map["name"].toString() + "_" + QString::number(file));
+  uniqueName = QString(map["name"].toString() + '_' + QString::number(file));
   type = static_cast<settingType>(map["type"].toInt());
   defVal = map["defVal"];
   possibleVals = map["possibleVals"].toStringList();
@@ -74,10 +74,11 @@ confOption::confOption(QVariantMap map)
 
   if (type == MULTILIST)
   {
-    // Create a map where all possibleVals are set to false
+    // Create a map where all possibleVals are set to false.
     QVariantMap defMap;
-    foreach (QString s, possibleVals)
+    foreach (const QString &s, possibleVals) {
       defMap[s] = false;
+    }
     defVal = defMap;
   }
   if (type == RESLIMIT)
@@ -97,7 +98,7 @@ int confOption::setValueFromFile(QString
 {
   // Used to set values in confOptions from a file line
   
-  QString rval = line.section("=",1).trimmed();
+  QString rval = line.section('=',1).trimmed();
 
   qDebug() << "setting " << realName << " to " << rval << " (from file)";
     
@@ -159,7 +160,7 @@ int confOption::setValueFromFile(QString
   {
     QVariantMap map;
 
-    QStringList readList = rval.split(" ", QString::SkipEmptyParts);
+    QStringList readList = rval.split(' ', QString::SkipEmptyParts);
     for (int i = 0; i < readList.size(); ++i)
     {
       if (!possibleVals.contains(readList.at(i)))
@@ -433,7 +434,7 @@ QString confOption::getValueAsString() c
       if (iter.value() == true && mapAsString.isEmpty())
         mapAsString = QString(iter.key());
       else if (iter.value() == true)
-        mapAsString = QString(mapAsString + " " + iter.key());
+        mapAsString = QString(mapAsString + ' ' + iter.key());
     }
     return mapAsString;
   }
@@ -447,7 +448,7 @@ QString confOption::getLineForFile() con
   if (value == defVal)
   {
     // value is set to default
-    return QString("#" + realName + "=\n");
+    return QString('#' + realName + "=\n");
   }
   else
   {
@@ -455,9 +456,9 @@ QString confOption::getLineForFile() con
     if (type == BOOL)
     {
       if (value.toBool())
-        return QString(realName + "=" + "yes\n");
+        return QString(realName + '=' + "yes\n");
       else
-        return QString(realName + "=" + "no\n");
+        return QString(realName + '=' + "no\n");
     }
 
     else if (type == MULTILIST)
@@ -469,47 +470,47 @@ QString confOption::getLineForFile() con
         for(QVariantMap::const_iterator iter = map.constBegin(); iter != map.constEnd(); ++iter)
         {
           if (iter.value().toBool())
-            ret = QString(ret + iter.key() + " ");
+            ret = QString(ret + iter.key() + ' ');
         }
-        return QString(realName + "=" + ret.trimmed() + "\n");
+        return QString(realName + '=' + ret.trimmed() + '\n');
       }
     }
 
     else if (type == TIME)
     {
       if (value.toULongLong() == 0)
-        return QString(realName + "=" + value.toString() + "\n");
+        return QString(realName + '=' + value.toString() + '\n');
       else
       {
         if (defUnit == ns)
-          return QString(realName + "=" + value.toString() + "ns\n");
+          return QString(realName + '=' + value.toString() + "ns\n");
         else if (defUnit == us)
-          return QString(realName + "=" + value.toString() + "us\n");
+          return QString(realName + '=' + value.toString() + "us\n");
         else if (defUnit == ms)
-          return QString(realName + "=" + value.toString() + "ms\n");
+          return QString(realName + '=' + value.toString() + "ms\n");
         else if (defUnit == s)
-          return QString(realName + "=" + value.toString() + "s\n");
+          return QString(realName + '=' + value.toString() + "s\n");
         else if (defUnit == min)
-          return QString(realName + "=" + value.toString() + "min\n");
+          return QString(realName + '=' + value.toString() + "min\n");
         else if (defUnit == h)
-          return QString(realName + "=" + value.toString() + "h\n");
+          return QString(realName + '=' + value.toString() + "h\n");
         else if (defUnit == d)
-          return QString(realName + "=" + value.toString() + "d\n");
+          return QString(realName + '=' + value.toString() + "d\n");
         else if (defUnit == w)
-          return QString(realName + "=" + value.toString() + "w\n");
+          return QString(realName + '=' + value.toString() + "w\n");
         else if (defUnit == month)
-          return QString(realName + "=" + value.toString() + "month\n");
+          return QString(realName + '=' + value.toString() + "month\n");
         else if (defUnit == year)
-          return QString(realName + "=" + value.toString() + "year\n");
+          return QString(realName + '=' + value.toString() + "year\n");
        }
     }
 
     else if (type == SIZE)
     {
-      return QString(realName + "=" + value.toString() + "M\n");
+      return QString(realName + '=' + value.toString() + "M\n");
     }
 
-    return QString(realName + "=" + value.toString() + "\n");
+    return QString(realName + '=' + value.toString() + '\n');
   } // not default
 }
 
--- kde-config-systemd-1.2.1.orig/src/confoption.h
+++ kde-config-systemd-1.2.1/src/confoption.h
@@ -70,8 +70,8 @@ class confOption {
     
     confOption();
     // Used for comparing
-    confOption(QString newName);
-    confOption(QVariantMap);
+    explicit confOption(QString newName);
+    explicit confOption(QVariantMap);
     
     bool operator==(const confOption& other) const;
     int setValue(QVariant);
--- kde-config-systemd-1.2.1.orig/src/confparms.cpp
+++ kde-config-systemd-1.2.1/src/confparms.cpp
@@ -15,13 +15,13 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.              *
  *******************************************************************************/
 
+#include "confparms.h"
+#include "fsutil.h"
+
 #include <QThread>
 
 #include <KLocalizedString>
 
-#include "confparms.h"
-#include "fsutil.h"
-
 QList<confOption> getConfigParms(const int systemdVersion)
 {
   // Creates an instance of confOption for each option in the systemd
@@ -303,7 +303,7 @@ QList<confOption> getConfigParms(const i
                                         << "DefaultLimitMEMLOCK" << "DefaultLimitLOCKS" << "DefaultLimitSIGPENDING"
                                         << "DefaultLimitMSGQUEUE" << "DefaultLimitNICE" << "DefaultLimitRTPRIO"
                                         << "DefaultLimitRTTIME";
-  foreach (QString s, resLimits)
+  foreach (const QString &s, resLimits)
   {
     map.clear();
     map["name"] = s;
@@ -502,7 +502,7 @@ QList<confOption> getConfigParms(const i
   if (systemdVersion >= 212)
     listLogLevel << "MaxLevelWall";
 
-  foreach (QString s, listLogLevel)
+  foreach (const QString &s, listLogLevel)
   {
     map.clear();
     map["name"] = s;
@@ -579,7 +579,7 @@ QList<confOption> getConfigParms(const i
                                            << "HandleHibernateKey" << "HandleLidSwitch";
   if (systemdVersion >= 217)
     listPower << "HandleLidSwitchDocked";
-  foreach (QString s, listPower)
+  foreach (const QString &s, listPower)
   {
     map.clear();
     map["name"] = s;
--- kde-config-systemd-1.2.1.orig/src/helper/helper.cpp
+++ kde-config-systemd-1.2.1/src/helper/helper.cpp
@@ -30,7 +30,7 @@ ActionReply Helper::save(const QVariantM
   for(QVariantMap::const_iterator iter = files.constBegin(); iter != files.constEnd(); ++iter)
   {
     QString contents = iter.value().toString();
-    QFile file(args["etcDir"].toString() + "/" + iter.key());
+    QFile file(args["etcDir"].toString() + '/' + iter.key());
     if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
       reply = ActionReply::HelperErrorReply();
       reply.addData("errorDescription", file.errorString());
--- kde-config-systemd-1.2.1.orig/src/helper/kcmsystemd.actions
+++ kde-config-systemd-1.2.1/src/helper/kcmsystemd.actions
@@ -1,7 +1,7 @@
 [Domain]
 Name=Systemd KDE control module
 Name[bg]=ÐÐ¾Ð½ÑÑÐ¾Ð»ÐµÐ½ Ð¼Ð¾Ð´ÑÐ» Ð½Ð° KDE Ð·Ð° Systemd
-Name[ca]=MÃ²dul de control del Â«systemdÂ» pel KDE
+Name[ca]=MÃ²dul de control KDE pel Â«systemdÂ»
 Name[de]=KDE-Kontrollmodul fÃ¼r systemd
 Name[es]=MÃ³dulo de control de KDE para systemd
 Name[fi]=KDE:n systemd-asetusosio
@@ -67,7 +67,25 @@ Persistence=session
 
 [org.kde.kcontrol.kcmsystemd.saveunitfile]
 Name=Save a systemd unit file
+Name[ca]=Desa un fitxer d'una unitat del Â«systemdÂ»
+Name[fi]=systemd-yksikkÃ¶tiedoston tallennus
+Name[gl]=Gardar un ficheiro de unidade de systemd.
+Name[nl]=Een systemd eenheidbestand opslaan
+Name[pl]=Zapisz pliki jednostki systemd
+Name[pt_BR]=Salvar um arquivo de unidade do systemd
+Name[sv]=Spara en systemd-enhetsfil
+Name[uk]=ÐÐ±ÐµÑÐµÐ³ÑÐ¸ ÑÐ°Ð¹Ð» Ð¼Ð¾Ð´ÑÐ»Ñ systemd
+Name[x-test]=xxSave a systemd unit filexx
 Description=Administrator authorization is required to save the systemd unit file
+Description[ca]=Es requereix autoritzaciÃ³ com a administrador per a desar el fitxer d'una unitat del Â«systemdÂ»
+Description[fi]=systemd-yksikkÃ¶tiedoston tallennus vaatii pÃ¤Ã¤kÃ¤yttÃ¤jÃ¤n oikeudet
+Description[gl]=PrecÃ­sase a autorizaciÃ³n do administrador para gardar o ficheiro de unidade de systemd.
+Description[nl]=Autorisatie als systeembeheerder is vereist om het eenheidsbestand van systemd op te slaan
+Description[pl]=Aby zapisaÄ plik jednostki systemd, wymagane sÄ uprawnienia administratora
+Description[pt_BR]=Ã necessÃ¡ria a autorizaÃ§Ã£o do administrador para salvar o arquivo de unidade do systemd
+Description[sv]=AdministratÃ¶rsbehÃ¶righet krÃ¤vs fÃ¶r att spara systemd-enhetsfilen
+Description[uk]=ÐÐ»Ñ Ð·Ð±ÐµÑÐµÐ¶ÐµÐ½Ð½Ñ ÑÐ°Ð¹Ð»Ð° Ð¼Ð¾Ð´ÑÐ»Ñ systemd ÑÐ»ÑÐ´ Ð¿ÑÐ¾Ð¹ÑÐ¸ ÑÐ¾Ð·Ð¿ÑÐ·Ð½Ð°Ð²Ð°Ð½Ð½Ñ Ð½Ð° Ð´Ð¾ÑÑÑÐ¿ Ð´Ð¾ Ð°Ð´Ð¼ÑÐ½ÑÑÑÑÐ°ÑÐ¸Ð²Ð½Ð¸Ñ ÑÑÐ½ÐºÑÑÐ¹
+Description[x-test]=xxAdministrator authorization is required to save the systemd unit filexx
 Policy=auth_admin
 Persistence=session
 
--- kde-config-systemd-1.2.1.orig/src/kcm-systemd-features.h.cmake
+++ kde-config-systemd-1.2.1/src/kcm-systemd-features.h.cmake
@@ -3,4 +3,4 @@
 
 #cmakedefine01 HAVE_CXX11_CHRONO
 
-#endif
\ No newline at end of file
+#endif
--- kde-config-systemd-1.2.1.orig/src/kcmsystemd.cpp
+++ kde-config-systemd-1.2.1/src/kcmsystemd.cpp
@@ -15,10 +15,10 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.              *
  *******************************************************************************/
 
+#include "config.h"
 #include "kcmsystemd.h"
 #include "confparms.h"
 #include "fsutil.h"
-#include "config.h"
 
 #include <unistd.h>
 
@@ -133,7 +133,7 @@ kcmsystemd::kcmsystemd(QWidget *parent,
   // logind
   systembus.connect(connLogind, "", ifaceDbusProp,
                     QStringLiteral("PropertiesChanged"), this,
-                    SLOT(slotLogindPropertiesChanged(QString, QVariantMap, QStringList)));
+                    SLOT(slotLogindPropertiesChanged(QString,QVariantMap,QStringList)));
   
   // Get list of units
   slotRefreshUnitsList(true, sys);
@@ -257,12 +257,12 @@ void kcmsystemd::load()
   }
 
   // Connect signals to slots, which need to be after initializeInterface()
-  connect(confModel, SIGNAL(dataChanged(const QModelIndex &, const QModelIndex &)), this, SLOT(slotConfChanged(const QModelIndex &, const QModelIndex &)));
+  connect(confModel, SIGNAL(dataChanged(QModelIndex,QModelIndex)), this, SLOT(slotConfChanged(QModelIndex,QModelIndex)));
 }
 
 void kcmsystemd::readConfFile(int fileindex)
 {
-  QFile file (etcDir + "/" + listConfFiles.at(fileindex));
+  QFile file (etcDir + '/' + listConfFiles.at(fileindex));
   if (file.open(QIODevice::ReadOnly | QIODevice::Text))
   {
     QTextStream in(&file);
@@ -273,18 +273,18 @@ void kcmsystemd::readConfFile(int filein
       if (!line.startsWith('#') && !line.startsWith('[') && !line.isEmpty())
       {
         // qDebug() << "line: " << line;
-        int index = confOptList.indexOf(confOption(QString(line.section("=",0,0).trimmed() + "_" + QString::number(fileindex))));
+        int index = confOptList.indexOf(confOption(QString(line.section('=',0,0).trimmed() + '_' + QString::number(fileindex))));
         if (index >= 0)
         {
           if (confOptList[index].setValueFromFile(line) == -1)
             displayMsgWidget(KMessageWidget::Warning,
-                             i18n("\"%1\" is not a valid value for %2. Using default value for this parameter.", line.section("=",1).trimmed(), confOptList.at(index).realName));
+                             i18n("\"%1\" is not a valid value for %2. Using default value for this parameter.", line.section('=',1).trimmed(), confOptList.at(index).realName));
         }
       }
       line = in.readLine();
     } // read lines until empty
 
-    qDebug() << QString("Successfully read " + etcDir + "/" + listConfFiles.at(fileindex));
+    qDebug() << QString("Successfully read " + etcDir + '/' + listConfFiles.at(fileindex));
   } // if file open
   else
     displayMsgWidget(KMessageWidget::Warning,
@@ -428,7 +428,7 @@ void kcmsystemd::save()
   QString systemConfFileContents;
   systemConfFileContents.append("# " + etcDir + "/system.conf\n# Generated by kcmsystemd control module v" + SYSTEMD_KCM_VERSION + ".\n");
   systemConfFileContents.append("[Manager]\n");
-  foreach (confOption i, confOptList)
+  foreach (const confOption &i, confOptList)
   {
     if (i.file == SYSTEMD)
       systemConfFileContents.append(i.getLineForFile());
@@ -437,7 +437,7 @@ void kcmsystemd::save()
   QString journaldConfFileContents;
   journaldConfFileContents.append("# " + etcDir + "/journald.conf\n# Generated by kcmsystemd control module v" + SYSTEMD_KCM_VERSION + ".\n");
   journaldConfFileContents.append("[Journal]\n");
-  foreach (confOption i, confOptList)
+  foreach (const confOption &i, confOptList)
   {
     if (i.file == JOURNALD)
       journaldConfFileContents.append(i.getLineForFile());
@@ -446,7 +446,7 @@ void kcmsystemd::save()
   QString logindConfFileContents;
   logindConfFileContents.append("# " + etcDir + "/logind.conf\n# Generated by kcmsystemd control module v" + SYSTEMD_KCM_VERSION + ".\n");
   logindConfFileContents.append("[Login]\n");
-  foreach (confOption i, confOptList)
+  foreach (const confOption &i, confOptList)
   {
     if (i.file == LOGIND)
       logindConfFileContents.append(i.getLineForFile());
@@ -455,7 +455,7 @@ void kcmsystemd::save()
   QString coredumpConfFileContents;
   coredumpConfFileContents.append("# " + etcDir + "/coredump.conf\n# Generated by kcmsystemd control module v" + SYSTEMD_KCM_VERSION + ".\n");
   coredumpConfFileContents.append("[Coredump]\n");
-  foreach (confOption i, confOptList)
+  foreach (const confOption &i, confOptList)
   {
     if (i.file == COREDUMP)
       coredumpConfFileContents.append(i.getLineForFile());
@@ -555,14 +555,14 @@ void kcmsystemd::slotCmbUnitTypes(int in
 
   if (QObject::sender()->objectName() == "cmbUnitTypes")
   {
-    systemUnitFilterModel->addFilterRegExp(unitType, "(" + unitTypeSufx.at(index) + ")$");
+    systemUnitFilterModel->addFilterRegExp(unitType, '(' + unitTypeSufx.at(index) + ")$");
     systemUnitFilterModel->invalidate();
     ui.tblUnits->sortByColumn(ui.tblUnits->horizontalHeader()->sortIndicatorSection(),
                               ui.tblUnits->horizontalHeader()->sortIndicatorOrder());
   }
   else if (QObject::sender()->objectName() == "cmbUserUnitTypes")
   {
-    userUnitFilterModel->addFilterRegExp(unitType, "(" + unitTypeSufx.at(index) + ")$");
+    userUnitFilterModel->addFilterRegExp(unitType, '(' + unitTypeSufx.at(index) + ")$");
     userUnitFilterModel->invalidate();
     ui.tblUserUnits->sortByColumn(ui.tblUserUnits->horizontalHeader()->sortIndicatorSection(),
                                   ui.tblUserUnits->horizontalHeader()->sortIndicatorOrder());
@@ -582,7 +582,7 @@ void kcmsystemd::slotRefreshUnitsList(bo
     unitslist.clear();
     unitslist = getUnitsFromDbus(sys);
     noActSystemUnits = 0;
-    foreach (SystemdUnit unit, unitslist)
+    foreach (const SystemdUnit &unit, unitslist)
     {
       if (unit.active_state == "active")
         noActSystemUnits++;
@@ -604,7 +604,7 @@ void kcmsystemd::slotRefreshUnitsList(bo
     userUnitslist.clear();
     userUnitslist = getUnitsFromDbus(user);
     noActUserUnits = 0;
-    foreach (SystemdUnit unit, userUnitslist)
+    foreach (const SystemdUnit &unit, userUnitslist)
     {
       if (unit.active_state == "active")
         noActUserUnits++;
@@ -685,7 +685,7 @@ void kcmsystemd::slotRefreshSessionList(
       }
     }
     // Delete the identified units from model
-    foreach (QPersistentModelIndex i, indexes)
+    foreach (const QPersistentModelIndex &i, indexes)
       sessionModel->removeRow(i.row());
   }
 
@@ -715,17 +715,21 @@ void kcmsystemd::slotRefreshTimerList()
   timerModel->removeRows(0, timerModel->rowCount());
 
   // Iterate through system unitlist and add timers to the model
-  foreach (SystemdUnit unit, unitslist)
+  foreach (const SystemdUnit &unit, unitslist)
   {
-    if (unit.id.endsWith(".timer") && unit.load_state != "unloaded")
+    if (unit.id.endsWith(QLatin1String(".timer")) &&
+        unit.load_state != QLatin1String("unloaded")) {
       timerModel->appendRow(buildTimerListRow(unit, unitslist, sys));
+    }
   }
 
   // Iterate through user unitlist and add timers to the model
-  foreach (SystemdUnit unit, userUnitslist)
+  foreach (const SystemdUnit &unit, userUnitslist)
   {
-    if (unit.id.endsWith(".timer") && unit.load_state != "unloaded")
+    if (unit.id.endsWith(QLatin1String(".timer")) &&
+        unit.load_state != QLatin1String("unloaded")) {
       timerModel->appendRow(buildTimerListRow(unit, userUnitslist, user));
+    }
   }
 
   // Update the left and passed columns
@@ -774,7 +778,7 @@ QList<QStandardItem *> kcmsystemd::build
     // Convert the monotonic system clock to microseconds
     qlonglong now_mono_usec = ts.tv_sec * 1000000 + ts.tv_nsec / 1000;
 
-    // And substract it
+    // And subtract it.
     time = time.addMSecs(-now_mono_usec/1000);
   }
 
@@ -1158,8 +1162,8 @@ bool kcmsystemd::eventFilter(QObject *ob
           if (!tty.isEmpty())
             path = tty;
           else if (!remoteHost.isEmpty())
-            path = getDbusProperty("Name", logdSession, spath).toString() + "@" + remoteHost;
-          toolTipText.append(" (" + path + ")");
+            path = getDbusProperty("Name", logdSession, spath).toString() + '@' + remoteHost;
+          toolTipText.append(" (" + path + ')');
         }
         toolTipText.append(i18n("<br><b>Class:</b> %1", getDbusProperty("Class", logdSession, spath).toString()));
         toolTipText.append(i18n("<br><b>State:</b> %1", getDbusProperty("State", logdSession, spath).toString()));
@@ -1313,7 +1317,9 @@ void kcmsystemd::slotUpdateTimers()
 
 void kcmsystemd::editUnitFile(const QString &filename)
 {
-  QDialog *dlgEditor = new QDialog(this);
+  // Using a QPointer is safer for modal dialogs.
+  // See: https://blogs.kde.org/node/3919
+  QPointer<QDialog> dlgEditor = new QDialog(this);
   dlgEditor->setWindowTitle(i18n("Editing %1", filename.section('/', -1)));
 
   QPlainTextEdit *textEdit = new QPlainTextEdit(dlgEditor);
@@ -1340,8 +1346,7 @@ void kcmsystemd::editUnitFile(const QStr
   textEdit->setPlainText(in.readAll());
   textEdit->setMinimumSize(500,300);
 
-  dlgEditor->exec();
-  if (dlgEditor->result() == QDialog::Accepted) {
+  if (dlgEditor->exec() == QDialog::Accepted) {
 
     // Declare a QVariantMap with arguments for the helper.
     QVariantMap helperArgs;
@@ -1362,6 +1367,7 @@ void kcmsystemd::editUnitFile(const QStr
                        i18n("Unit file successfully written."));
     }
   }
+  delete dlgEditor;
 }
 
 QList<SystemdUnit> kcmsystemd::getUnitsFromDbus(dbusBus bus)
@@ -1429,8 +1435,8 @@ QList<SystemdUnit> kcmsystemd::getUnitsF
           SystemdUnit unit;
           unit.id = unitfileslist.at(i).name.section('/',-1);
           unit.load_state = "unloaded";
-          unit.active_state = "-";
-          unit.sub_state = "-";
+          unit.active_state = '-';
+          unit.sub_state = '-';
           unit.unit_file = unitfileslist.at(i).name;
           unit.unit_file_status= unitfileslist.at(i).status;
           list.append(unit);
--- kde-config-systemd-1.2.1.orig/src/sortfilterunitmodel.h
+++ kde-config-systemd-1.2.1/src/sortfilterunitmodel.h
@@ -30,7 +30,7 @@ class SortFilterUnitModel : public QSort
   Q_OBJECT
 
 public:
-  SortFilterUnitModel(QObject *parent = 0);
+  explicit SortFilterUnitModel(QObject *parent = 0);
   void initFilterMap(const QMap<filterType, QString> &map);
   void addFilterRegExp(filterType type, const QString &pattern);
 
--- kde-config-systemd-1.2.1.orig/src/systemdunit.h
+++ kde-config-systemd-1.2.1/src/systemdunit.h
@@ -1,3 +1,20 @@
+/*******************************************************************************
+ * Copyright (C) 2013-2015 Ragnar Thomsen <rthomsen6@gmail.com>                *
+ *                                                                             *
+ * This program is free software: you can redistribute it and/or modify it     *
+ * under the terms of the GNU General Public License as published by the Free  *
+ * Software Foundation, either version 2 of the License, or (at your option)   *
+ * any later version.                                                          *
+ *                                                                             *
+ * This program is distributed in the hope that it will be useful, but WITHOUT *
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for    *
+ * more details.                                                               *
+ *                                                                             *
+ * You should have received a copy of the GNU General Public License along     *
+ * with this program. If not, see <http://www.gnu.org/licenses/>.              *
+ *******************************************************************************/
+
 #ifndef SYSTEMDUNIT_H
 #define SYSTEMDUNIT_H
 
--- kde-config-systemd-1.2.1.orig/src/unitmodel.cpp
+++ kde-config-systemd-1.2.1/src/unitmodel.cpp
@@ -15,6 +15,8 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.              *
  *******************************************************************************/
 
+#include "unitmodel.h"
+
 #include <QtDBus/QtDBus>
 #include <QColor>
 #include <KLocalizedString>
@@ -22,8 +24,6 @@
 
 #include <systemd/sd-journal.h>
 
-#include "unitmodel.h"
-
 UnitModel::UnitModel(QObject *parent)
  : QAbstractTableModel(parent)
 {
@@ -266,7 +266,7 @@ QStringList UnitModel::getLastJrnlEntrie
       r = sd_journal_get_data(journal, "PRIORITY", &data, &length);
       if (r == 0)
       {
-        int prio = QString::fromUtf8((const char *)data, length).section("=",1).toInt();
+        int prio = QString::fromUtf8((const char *)data, length).section('=',1).toInt();
         if (prio <= 3)
           line.append("<span style='color:tomato;'>");
         else if (prio == 4)
@@ -279,7 +279,7 @@ QStringList UnitModel::getLastJrnlEntrie
       r = sd_journal_get_data(journal, "MESSAGE", &data, &length);
       if (r == 0)
       {
-        line.append(": " + QString::fromUtf8((const char *)data, length).section("=",1) + "</span>");
+        line.append(": " + QString::fromUtf8((const char *)data, length).section('=',1) + "</span>");
         if (line.length() > 195)
           line = QString(line.left(195) + "..." + "</span>");
         reply << line;
--- kde-config-systemd-1.2.1.orig/src/unitmodel.h
+++ kde-config-systemd-1.2.1/src/unitmodel.h
@@ -27,8 +27,8 @@ class UnitModel : public QAbstractTableM
   Q_OBJECT
   
 public:
-  UnitModel(QObject *parent = 0);
-  UnitModel(QObject *parent = 0, const QList<SystemdUnit> *list = NULL, QString userBusPath = "");
+  explicit UnitModel(QObject *parent = 0);
+  explicit UnitModel(QObject *parent = 0, const QList<SystemdUnit> *list = NULL, QString userBusPath = "");
   int rowCount(const QModelIndex & parent = QModelIndex()) const;
   int columnCount(const QModelIndex & parent = QModelIndex()) const;
   QVariant headerData(int section, Qt::Orientation orientation, int role) const;
